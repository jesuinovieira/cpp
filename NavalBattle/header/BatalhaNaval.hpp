#ifndef BATALHANAVAL_HPP
#define BATALHANAVAL_HPP

//_________________________________________________________________________________________________________________________________

#include <iostream>
#include "BatalhaNavalException.hpp"
#include "Tabuleiro.hpp"
#include "Jogador.hpp"
#include "IA.hpp"

//_________________________________________________________________________________________________________________________________

template<class T>
class BatalhaNaval
{
public:
	BatalhaNaval()
	{
		throw BatalhaNavalException(1);
	}

	~BatalhaNaval() { }

private:
	//
};


//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________


template<>
class BatalhaNaval<IA>
{
public:
//_________________________________________________________________________________________________________________________________

	// Por padrão, IA esta ligada
	BatalhaNaval(bool tmp = true) : _campeao(nullptr), _rodada(0), _IA(tmp)
	{
		_usuario.posicionaNaviosAleatoriamente();
		_computador.posicionaNaviosAleatoriamente();

		_usuario.setNome("Usuario");
		_computador.setNome("Computador");
	}
//_________________________________________________________________________________________________________________________________

	~BatalhaNaval()
	{
		//
	}
//_________________________________________________________________________________________________________________________________


//_________________________________________________________________________________________________________________________________

	void setRodada(int tmp)
	{
		_rodada = tmp;
	}
//_________________________________________________________________________________________________________________________________


//_________________________________________________________________________________________________________________________________

	void getTabuleiros(const Tabuleiro** A, const Tabuleiro** B)
	{
		*A = _usuario.getTabuleiro();
		*B = _computador.getTabuleiro();
	}
//_________________________________________________________________________________________________________________________________


//_________________________________________________________________________________________________________________________________
	
	Jogador* getCampeao()
	{
		if(_usuario.getVidaNavios() > _computador.getVidaNavios())
			_campeao = &_usuario;
		else if(_usuario.getVidaNavios() < _computador.getVidaNavios())
			_campeao = &_computador;
		else
			_campeao = nullptr;

		return _campeao;
	}
//_________________________________________________________________________________________________________________________________


//_________________________________________________________________________________________________________________________________

	int getRodada() const
	{
		return _rodada;
	}
//_________________________________________________________________________________________________________________________________


//_________________________________________________________________________________________________________________________________

	char verificaTiro(int x, int y)
	{
		/*
			Quem utilizar verificaTiro, deve ter um try, pois o mesmo lança uma 
		exceção se um navio foi destruido. Essa exceção é uma string com o tipo do navio.

			Exceção 	 -> Destruiu um navio
			A 	    	 -> Acertou um navio
			E 	    	 -> Errou
		*/

		char R = '\0';

		/* Verifica se é a vez do computador jogar. */
		if(_rodada % 2 == 0){
			int xx = 0, yy = 0;

			tiroComputador(&xx, &yy);

			try{
				R = _usuario.atirarXY(xx, yy);
			}catch(std::string navio){
				_computador.esvaziarlTiros();
				throw navio;	// Relançamento de exceção!
			}

			if(R == 'A')		// Insere na lista, N, L, S e O
			{
				NLSO_IA(xx, yy);
			}

			return R;
		}

		/* Caso contrário, segue os passos para realizar o tiro do jogador. */
		if( _computador.tiroInvalido(x, y) )	return 'F';		// Tiro inválido	

		R = _computador.atirarXY(x, y);

		return R;
	}
//_________________________________________________________________________________________________________________________________


//_________________________________________________________________________________________________________________________________

	void tiroComputador(int *x, int *y)
	{
		_computador.getTiros(x, y, _IA);

		while( _usuario.tiroInvalido(*x, *y) )
			_computador.getTiros(x, y, _IA);
	}
//_________________________________________________________________________________________________________________________________


//_________________________________________________________________________________________________________________________________

	bool fimDeJogo()
	{
		/* O usuário tem 70 tiros para destruir os navios do computador. */
		if( _usuario.getTiros() == 0 )
			throw BatalhaNavalException(3);

		if( _usuario.perdeuJogo() ){
			_campeao = &_computador;
			_computador.incrementaVitorias();
			return true;
		}

		if( _computador.perdeuJogo() ){
			_campeao = &_usuario;
			_usuario.incrementaVitorias();
			return true;
		}

		return false;
	}
//_________________________________________________________________________________________________________________________________


private:
//_________________________________________________________________________________________________________________________________

	Jogador _usuario;
	IA _computador;
	
	Jogador* _campeao;

	int _rodada;
	bool _IA;		// Se true, modo dificil. Se false, modo facil.
//_________________________________________________________________________________________________________________________________


//_________________________________________________________________________________________________________________________________

	/* Esse método insere na lista da IA os tiros vizinhos do qual ela acabou de acertar. */
	void NLSO_IA(int x, int y)
	{
		// Norte 	(N)
		if(x - 1 >= 0)
			if( !_usuario.tiroInvalido(x - 1, y))
				_computador.insereTiro(x - 1, y);

		// Oeste 	(O)
		if(y - 1 >= 0)
			if( !_usuario.tiroInvalido(x, y - 1))
				_computador.insereTiro(x, y - 1);

		// Sul 		(S)
		if(x + 1 <= 14)
			if( !_usuario.tiroInvalido(x + 1, y))
				_computador.insereTiro(x + 1, y);

		// Leste 	(L)
		if(y + 1 <= 14)
			if( !_usuario.tiroInvalido(x, y + 1))
				_computador.insereTiro(x, y + 1);
	}
//_________________________________________________________________________________________________________________________________
};



//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________
//_________________________________________________________________________________________________________________________________


template<>
class BatalhaNaval<Jogador>
{
public:

//_________________________________________________________________________________________________________________________________

	BatalhaNaval() : 	_usuarioA(15 * 15),	// Nesse modelo de jogo o limite de tiros é a qtd de celulas do tabuleiro	
					 	_usuarioB(15 * 15),
					 	_campeao(nullptr), 
					 	_rodada(0)
	{
		_usuarioA.posicionaNaviosAleatoriamente();
		_usuarioB.posicionaNaviosAleatoriamente();

		_usuarioA.setNome("Jogador A");
		_usuarioB.setNome("Jogador B");
	}
//_________________________________________________________________________________________________________________________________


//_________________________________________________________________________________________________________________________________

	~BatalhaNaval()
	{
		//
	}
//_________________________________________________________________________________________________________________________________


//_________________________________________________________________________________________________________________________________

	void setRodada(int tmp)
	{
		_rodada = tmp;
	}
//_________________________________________________________________________________________________________________________________


//_________________________________________________________________________________________________________________________________

	void getTabuleiros(const Tabuleiro** A, const Tabuleiro** B)
	{
		*A = _usuarioA.getTabuleiro();
		*B = _usuarioB.getTabuleiro();
	}
//_________________________________________________________________________________________________________________________________


//_________________________________________________________________________________________________________________________________
	
	Jogador* getCampeao()
	{
		if(_usuarioA.getVidaNavios() > _usuarioB.getVidaNavios())
			_campeao = &_usuarioA;
		else if(_usuarioA.getVidaNavios() < _usuarioB.getVidaNavios())
			_campeao = &_usuarioB;
		else
			_campeao = nullptr;

		return _campeao;
	}
//_________________________________________________________________________________________________________________________________


//_________________________________________________________________________________________________________________________________

	int getRodada() const
	{
		return _rodada;
	}
//_________________________________________________________________________________________________________________________________



//_________________________________________________________________________________________________________________________________

	char verificaTiro(int x, int y)
	{

		/*	
			Quem utilizar verificaTiro, deve ter um try, pois o mesmo lança uma 
			exceção se um navio foi destruido. Essa exceção é uma string com o tipo do navio.
			Exceção 	 -> Destruiu um navio
			A 	   		 -> Acertou um navio
			E 	   		 -> Errou
		*/
		
		char R = '\0';

		if(_rodada % 2 == 0){									// Jogada do jogador B
			if( _usuarioA.tiroInvalido(x, y) )	return 'F';		// Tiro inválido	
			R = _usuarioA.atirarXY(x, y);
		}else{													// Jogada do jogador A
			if( _usuarioB.tiroInvalido(x, y) )	return 'F';		// Tiro inválido	
			R = _usuarioB.atirarXY(x, y);
		}

		return R;
	}
//_________________________________________________________________________________________________________________________________


//_________________________________________________________________________________________________________________________________

	bool fimDeJogo()
	{
		if( _usuarioA.getTiros() == 0 || _usuarioB.getTiros() == 0 )
			throw BatalhaNavalException(3);

		if( _usuarioA.perdeuJogo() ){
			_campeao = &_usuarioB;
			_usuarioB.incrementaVitorias();
			return true;
		}

		if( _usuarioB.perdeuJogo() ){
			_campeao = &_usuarioA;
			_usuarioA.incrementaVitorias();
			return true;
		}

		return false;
	}
//_________________________________________________________________________________________________________________________________


private:
//_________________________________________________________________________________________________________________________________

	Jogador _usuarioA;
	Jogador _usuarioB;
	
	Jogador* _campeao;

	int _rodada;
//_________________________________________________________________________________________________________________________________

};

#endif